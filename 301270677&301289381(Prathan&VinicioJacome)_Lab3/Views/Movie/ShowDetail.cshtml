@model Movie
@{
    ViewBag.Title = "Show Movie Detail";
    var currentUsername = Context.Session.GetString("Username");
    var currentUserId = Context.Session.GetString("UserId");
}
@if (currentUserId != null && currentUsername != null)
{
    <div class="user-info">
        <span class="username">Hello, @currentUsername</span>
        <span class="user-id">(@currentUserId)</span>
    </div>

    <div class="container mt-5">
        <div class="row">
            <div class="col-md-8 offset-md-2">
                <!-- Centered card in a wider viewport -->
                <div class="card">
                    <!-- Image on the left side -->
                    <div class="row no-gutters">
                        <div class="col-md-6">
                            <img src="@Model.ImageS3Url" class="card-img" alt="Card image cap">
                        </div>

                        <!-- Movie's Detail on the right side -->
                        <div class="col-md-6">
                            <div class="card-body">
                                <h3 class="card-title">Movie's Detail</h3>
                                <h5 class="mt-3">Movie's Title: @Model.Title</h5>
                                <div class="mt-4 d-flex align-items-center">
                                    <button type="button" class="btn btn-primary ml-2" id="openModalBtn">Rating</button>
                                    <p class="avgRating ml-2"> <i class="fas fa-star" style="color: gold;"></i> Average Rating: @((Model.AverageRating ?? 0).ToString()) /10</p>
                                </div>
                                @{
                                    var specificUserID = currentUserId;
                                    var userRating = 0; // default value
                                    if (Model.Ratings != null)
                                    {
                                        userRating = Model.Ratings.FirstOrDefault(r => r.UserID == specificUserID)?.RateValue ?? 0;
                                    }
                                }
                                <p>Your Rating: @userRating /10</p>
                                <div class="mt-4">
                                    <!-- <a href="@Model.MovieS3Url" download class="btn btn-primary">Download Movie</a> -->
                                    <a id="downloadMovieLink" href="#" class="btn btn-primary ml-2">Download Movie</a>
                                    <button type="button" id="createCommentModal" class="btn btn-secondary  ml-2">Create Comment</button>
                                </div>
                                <!-- Add more details or elements here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>       
    </div>

    <div class="row mt-4">
        <div class="col-md-8 offset-md-2">
            @if (Model.Comments != null && Model.Comments.Any())
            {
                <hr>
                <h6>Comments:</h6>
                @foreach (var comment in Model.Comments)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            @{
                                var visiblePart = comment.UserID.Substring(4);
                                var maskedUserID = new string('*', 4) + visiblePart;
                            }
                            <p class="card-text">@maskedUserID</p>
                            <p class="card-text">@comment.Message</p>
                            <p class="card-text">@comment.CommentDateTime</p>
                            <!-- Check if the comment is less than 24 hours old and by the current user -->
                            @if ((DateTime.Now - comment.CommentDateTime).TotalHours < 24 && comment.UserID == currentUserId)
                            {
                                <button class="btn btn-sm btn-primary edit-comment"
                                        data-message="@comment.Message"
                                        data-userid="@comment.UserID">
                                    <i class="fas fa-edit"></i> Edit
                                </button>                      
                            }

                        </div>
                    </div>
                }
            }
            else
            {
                <p>No comments available for this movie.</p>
            }
        </div>
    </div>

    // add comment modal
    <div class="modal fade" id="commentModal" tabindex="-1" role="dialog" aria-labelledby="commentModalLabel">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="commentModalLabel">Create Comment</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <textarea id="commentText" class="form-control" placeholder="Write your comment..."></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" id="submitComment" class="btn btn-primary">Submit Comment</button>
                </div>
            </div>
        </div>
    </div>

    //edit comment modal
    <div class="modal fade" id="editCommentModal" tabindex="-1" role="dialog" aria-labelledby="editCommentModalLabel">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editCommentModalLabel">Edit Comment</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <textarea id="editCommentText" class="form-control" placeholder="Edit your comment..."></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" id="saveEditedComment" class="btn btn-primary">Save Comment</button>
                </div>
            </div>
        </div>
    </div>


    //Rating Modal
    <div class="modal fade" id="ratingModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">RATE THIS</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <p id="selectedStarText"></p>
                <div class="modal-body text-center">
                    <div class="stars">
                        <span class="star" data-value="1">★</span>
                        <span class="star" data-value="2">★</span>
                        <span class="star" data-value="3">★</span>
                        <span class="star" data-value="4">★</span>
                        <span class="star" data-value="5">★</span>
                        <span class="star" data-value="6">★</span>
                        <span class="star" data-value="7">★</span>
                        <span class="star" data-value="8">★</span>
                        <span class="star" data-value="9">★</span>
                        <span class="star" data-value="10">★</span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" id="submitRating" class="btn btn-primary">Rate</button>
                </div>
            </div>
        </div>
    </div>


}

@section Scripts {
    <script>
    $(document).ready(function () {
        document.getElementById('downloadMovieLink').addEventListener('click', function (e) {
            e.preventDefault();

            // Extract filename and extension from the S3 URL
            var url = '@Model.MovieS3Url';
            var lastSlashIndex = url.lastIndexOf('/');
            var fileNameWithExtension = url.substring(lastSlashIndex + 1);

            // Split the filename and extension
            var fileName = fileNameWithExtension.split('.')[0];
            var fileExtension = fileNameWithExtension.split('.')[1];

            // Fetch the file
            fetch('@Model.MovieS3Url')
                .then(response => response.blob())
                .then(blob => {
                    var url = window.URL.createObjectURL(blob);
                    var a = document.createElement('a');
                    a.href = url;

                    // Set the download filename with the extracted name and extension
                    a.download = `${fileName}.${fileExtension}`;

                    document.body.appendChild(a);
                    a.click();
                    a.remove();
                })
                .catch(err => {
                    console.error('There was an error: ', err);
                });
        });   
    
            // Show comment modal when "Create Comment" button is clicked
            $("#createCommentModal").click(function () {
                $("#commentModal").modal("show");
            });

            $("#submitComment").click(function () {
                var movieId = "@Model.MovieID"; 
                var message = $("#commentText").val();

                if (message.trim() === "") {
                    alert("Comment cannot be empty!");
                    return;
                }

                $.ajax({
                    url: '/Movie/AddComment', 
                    method: 'POST',
                    data: {
                        movieId: movieId,
                        message: message
                    },
                    success: function () {
                        // Close the modal and reload the page to see the new comment
                        $("#commentModal").modal("hide");
                        location.reload();
                    },
                    error: function () {
                        alert("Failed to add the comment. Please try again.");
                    }
                });
            });


            //edit comment
            $(".edit-comment").click(function () {
                var message = $(this).data("message");
                var userId = $(this).data("userid");

                // Populate the edit form with the current comment message
                $("#editCommentText").val(message);

                // Store the current comment details for later use
                $("#editCommentModal").data("message", message);
                $("#editCommentModal").data("userid", userId);

                // Show the edit modal
                $("#editCommentModal").modal("show");
            });



            $("#saveEditedComment").click(function () {
                var editedMessage = $("#editCommentText").val();
                var originalMessage = $("#editCommentModal").data("message");
                var userId = $("#editCommentModal").data("userid");
                var movieId = "@Model.MovieID"; // Assuming your Movie model has a MovieID property

                // Close the edit modal
                $("#editCommentModal").modal("hide");

                // Send an AJAX request to update the comment in DynamoDB
                $.ajax({
                    url: '/Movie/EditComment', // Replace with your controller action URL
                    method: 'POST',
                    data: {
                        movieId: movieId, // Include the movieId
                        userId: userId,
                        originalMessage: originalMessage,
                        editedMessage: editedMessage
                    },
                    success: function () {
                        $("#editCommentModal").modal("hide");
                        location.reload();
                    },
                    error: function () {
                        alert("Failed to edit the comment. Please try again.");
                    }
                });
            });

            //Rating Script
             $("#openModalBtn").click(function() {
                var canRate = true;

        @if (Model.Ratings != null)
        {
            foreach (var rating in Model.Ratings)
            {
                
                if ((DateTime.Now - rating.RatingDateTime).TotalHours > 24 && rating.UserID == currentUserId)
                {
                    // User has rated within the last 24 hours
                    @:canRate = false;
                    break;
                }
            }
        }

                if (!canRate) {
                    alert("You have already rated within the last 24 hours!");
                } else {
                    // When the user can rate, show the rating modal
                    $("#ratingModal").modal('show');
                }
        // $("#ratingModal").modal('show');
    });

            const stars = document.querySelectorAll('.star');
            let selectedStar = 0;

            stars.forEach((star, index) => {
                star.addEventListener('click', function () {
                    // Remove any existing 'active' or 'selected' classes from all stars
                    stars.forEach(s => s.classList.remove('active', 'selected'));

                    // Add 'selected' class to all stars up to and including the clicked one
                    for (let i = 0; i <= index; i++) {
                        stars[i].classList.add('selected');
                    }

                    // Add 'active' class to the clicked star
                    this.classList.add('active');

                    // Store the clicked star's value
                    selectedStar = this.getAttribute('data-value');

                    // Update the new paragraph element with the selected star value
                    document.getElementById('selectedStarText').innerText = `You are rating for ${selectedStar} star(s)`;
                });
            });


            $("#submitRating").click(function () {
                var movieId = "@Model.MovieID"; // Assuming your Movie model has a MovieID property
                var userId = "@currentUserId";

                if (selectedStar === 0) {
                    alert("Please select a rating before submitting.");
                    return;
                }

                $.ajax({
                    url: '/Movie/UpdateAverageRating', 
                    method: 'POST',
                    data: {
                        movieId: movieId,
                        userId: userId,
                        userRating: selectedStar
                    },
                    success: function () {
                        $("#ratingModal").modal("hide");
                        location.reload();
                    },
                    error: function () {
                        alert("Failed to update the rating. Please try again.");
                    }
                });
            });


     });

    </script>
}
